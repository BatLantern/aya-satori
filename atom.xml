<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>蝠池書閤</title>
  
  
  <link href="http://smallbat.cn/atom.xml" rel="self"/>
  
  <link href="http://smallbat.cn/"/>
  <updated>2024-05-27T09:33:02.031Z</updated>
  <id>http://smallbat.cn/</id>
  
  <author>
    <name>蝙蝠猫BatBattery</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日一题#1 [位运算]</title>
    <link href="http://smallbat.cn/everyday-quizs/everyquiz-1/"/>
    <id>http://smallbat.cn/everyday-quizs/everyquiz-1/</id>
    <published>2023-10-16T15:55:00.000Z</published>
    <updated>2024-05-27T09:33:02.031Z</updated>
    
    <content type="html"><![CDATA[  <div class="note-large pink">    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">      <p>寄语</p>    </div>    <div class="notel-content">      <p><strong>时光流转，愿你终有一天能和你重要的人重逢。</strong><br> 　　　　　　　　  <em>——艾拉《可塑性记忆》</em></p>    </div>  </div><hr><h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p><strong>从今天开始会写blog，主要是记笔记以防后期忘记，同时也会记一些重要的知识点。</strong></p><p><strong>好了，让我们开始吧。</strong>(纯小白，大佬轻喷)</p><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>今天的力扣签到题为<a href="https://leetcode.cn/problems/single-number-iii/description/"><em>260. 只出现一次的数字 III</em></a>，题目如下：</p><blockquote><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [1,2,1,3,2,5]</span><br><span class="line">输出：[3,5]</span><br><span class="line">解释：[5, 3] 也是有效的答案。</span><br></pre></td></tr></table></figure></div></blockquote><p>看到这道题，我脑子里第一个想法就是用ide的内置函数 <del>(开摆)</del> 。</p><p>在C#中有个叫count()的函数，它的功能是<strong>计算序列中的元素数量</strong>。<br>如果不填参数，将返回元素的个数。</p><p>若填写参数，这个函数的功能就会变成<strong>计算序列中满足某个条件时的元素数量</strong>。<br>这个时候，我就可以用这个函数来寻找需要的结果。</p><hr><h3 id="方法和思路"><a href="#方法和思路" class="headerlink" title="方法和思路"></a>方法和思路</h3><h4 id="方法一：内置函数"><a href="#方法一：内置函数" class="headerlink" title="方法一：内置函数"></a>方法一：内置函数</h4><p>代码如下 :  <strong><code>时间复杂度：O(n)</code></strong> <strong><code>空间复杂度：O(1)</code></strong></p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SingleNumber</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">　<span class="built_in">int</span>[] answer = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">　<span class="built_in">int</span> j = <span class="number">0</span>;</span><br><span class="line">  <span class="comment">//遍历整个数组并找到只出现一次的值</span></span><br><span class="line">　<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; nums.Length; i++) &#123;</span><br><span class="line">　　<span class="built_in">int</span> count = nums.Count(n =&gt; n == nums[i]);</span><br><span class="line">    <span class="comment">//有则存入answer数组</span></span><br><span class="line">　　<span class="keyword">if</span>(count == <span class="number">1</span>) &#123;</span><br><span class="line">　　　answer[j] = nums[i];</span><br><span class="line">　　　j++;</span><br><span class="line">　　&#125;</span><br><span class="line">　&#125;</span><br><span class="line">　<span class="keyword">return</span> answer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>这里使用了内置函数，让系统帮我找，也没什么好说的。</p>  <div class="note p-4 mb-4 rounded-small warning">    <p>非常耗时间 <strong><code>(2748ms)</code></strong> 和空间 <strong><code>(44.10MB)</code></strong></p>  </div><hr><h4 id="方法二：哈希集合"><a href="#方法二：哈希集合" class="headerlink" title="方法二：哈希集合"></a>方法二：哈希集合</h4><p>基于内置函数真的太慢的情况下，我想了一个别的方法。</p><p>我采用了哈希集合，它采用了一种<strong>数据结构</strong>来存储数字频率，如果要查询频率，它完全可以在<strong>常数时间内</strong>返回结果。</p><p>所以先创建一个哈希集合，如果在这个哈希集合中<strong>能找到</strong>这个数字，则说明这个数字出现了<strong>两次</strong>；反之如果没寻找到，则说明这个数字只出现了<strong>一次</strong>。</p><p>代码如下 :  <strong><code>时间复杂度：O(n)</code></strong> <strong><code>空间复杂度：O(n)</code></strong></p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SingleNumber</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">　HashSet&lt;<span class="built_in">int</span>&gt; numsCounts = <span class="keyword">new</span>();</span><br><span class="line">　<span class="comment">//遍历整个数组</span></span><br><span class="line">　<span class="keyword">foreach</span> (<span class="built_in">int</span> i <span class="keyword">in</span> nums) &#123;</span><br><span class="line">　　<span class="comment">//如果在集合中找到了重复元素，就把它剔除；如果没找到就添加进去</span></span><br><span class="line">　　<span class="keyword">if</span>(numsCounts.Contains(i))</span><br><span class="line">　　　numsCounts.Remove(i);</span><br><span class="line">　　<span class="keyword">else</span></span><br><span class="line">　　　numsCounts.Add(i);</span><br><span class="line">　　&#125;</span><br><span class="line">　<span class="comment">//以数组形式返回</span></span><br><span class="line">　<span class="keyword">return</span> numsCounts.ToArray();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>  <div class="note-large blue">    <div class="notel-title rounded-t-lg p-3 font-bold text-lg flex flex-row gap-2 items-center">      <p>优化</p>    </div>    <div class="notel-content">      <p>因为哈希集合是不包含<strong>重复</strong>元素的集合，所以如果有重复元素添加时他会<strong>跳过</strong>。<br>Add方法中，如果添加的元素是重复的，他不会添加，只会返回一个false，告诉你添加失败</p>    </div>  </div><p>所以就可以用这个性质对 <code>Foreach</code>进行优化，把循环内的代码变成只有一个if判断</p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//若添加失败(有重复)则把这个数字剔除</span></span><br><span class="line"><span class="keyword">if</span>(!numsCounts.Add(i))</span><br><span class="line">      numsCounts.Remove(i);</span><br></pre></td></tr></table></figure></div><p>通过这种方法得出的结果和优化前差不多，但是更简洁。</p>  <div class="note p-4 mb-4 rounded-small warning">    <p>通过这种方法得出的结果，耗时 <strong><code>(152ms)</code></strong> 和空间 **<code>(42.55MB)</code>**。</p>  </div><hr><h4 id="方法三：位运算"><a href="#方法三：位运算" class="headerlink" title="方法三：位运算"></a>方法三：位运算</h4><p>因为这个题目的标签里面有<strong>位运算</strong>，所以我一直在想怎么用，但是一整天都没想出来。</p><p>怎么办呢？那只好去翻翻题解了。</p>  <div class="note p-4 mb-4 rounded-small info">    <p>X⊕X&#x3D;0(相同数字会抵消) 　　　 　　 0⊕X&#x3D;X(0与某数异或等于那个数)</p>  </div><p>异或运算的原理如上所示，现在将所有数字异或，必定得到一个<strong>不为0</strong>的数。</p><p>若输入为 <code>[1, 2, 1, 3, 2, 5]</code>，则他们的异或结果应该是3^5(这两个数字就是我们要求的答案)</p><p>然后将这个得出来的数的<strong>补码</strong>(一种负数二进制形式)和它自己(也就是刚刚异或的结果)进行<strong>与运算</strong>。</p><p>这样可以得到只有最低位是1的二进制码，这个位就是两个只出现一次的数字在二进制表示上的差异。</p><p>以下为步骤表格：看表格，3和5从右往左第一个差异是不是<strong>第二位</strong>不一样？所以<strong>异或结果的补码</strong>只有第二位为1。</p><blockquote><table><thead><tr><th>步骤&#x2F;数字</th><th>3</th><th>5</th><th>3^5</th></tr></thead><tbody><tr><td>二进制码</td><td>011</td><td>101</td><td>110</td></tr><tr><td>反码</td><td>100</td><td>010</td><td>001</td></tr><tr><td>补码</td><td>101</td><td>011</td><td>010</td></tr></tbody></table></blockquote><p>现在就可以对原数组的每一个数进行<strong>与运算</strong>后分类，有0的分为一组，有1的分为一组。</p><p>以下是分类结果：针对输入为 <code>[1, 2, 1, 3, 2, 5]</code>的为例</p><ul><li>1：2, 2, 3</li><li>0：1, 1, 5</li></ul><p>经过”分治”的过程，问题转化成了简单的 **<code>&quot;在偶数次数字里找到只出现一次的元素&quot;</code>**。</p><p>现在只要遵循异或的运算规则，将一个类总的所有元素全部<strong>异或</strong>，偶数次的元素会被<strong>相互抵消</strong>，然后就会剩下只出现一次的元素了。</p><p>代码如下 :  <strong><code>时间复杂度：O(n)</code></strong> <strong><code>空间复杂度：O(1)</code></strong></p><div class="highlight-container" data-rel="Csharp"><figure class="iseeu highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span>[] <span class="title">SingleNumber</span>(<span class="params"><span class="built_in">int</span>[] nums</span>)</span> &#123;</span><br><span class="line">　<span class="comment">//定义</span></span><br><span class="line">　<span class="built_in">int</span> numsxor = <span class="number">0</span>;</span><br><span class="line">　<span class="built_in">int</span>[] res = <span class="keyword">new</span> <span class="built_in">int</span>[<span class="number">2</span>];</span><br><span class="line">　<span class="comment">//所有元素异或</span></span><br><span class="line">　<span class="keyword">foreach</span> (<span class="built_in">int</span> num <span class="keyword">in</span> nums)</span><br><span class="line">　　numsxor ^= num;</span><br><span class="line">　<span class="comment">//异或结果和补码与运算，得到最低位为1的二进制码</span></span><br><span class="line">　<span class="comment">//就是取最右边的那个1，这个1保留，其他全改成0</span></span><br><span class="line">　<span class="built_in">int</span> answer = numsxor &amp; (-numsxor);</span><br><span class="line">　<span class="comment">//用这个码对数组分类</span></span><br><span class="line">　<span class="keyword">foreach</span> (<span class="built_in">int</span> num <span class="keyword">in</span> nums)</span><br><span class="line">　&#123;</span><br><span class="line">　　<span class="comment">//全部异或抵消得到结果</span></span><br><span class="line">　　<span class="keyword">if</span> ((answer &amp; num) == <span class="number">0</span>)</span><br><span class="line">　　　res[<span class="number">0</span>] ^= num;</span><br><span class="line">　　<span class="keyword">else</span></span><br><span class="line">　　　res[<span class="number">1</span>] ^= num;</span><br><span class="line">　&#125;</span><br><span class="line">　<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>通过这种方法得出的结果，耗时 <strong><code>(132ms)</code></strong> 和空间 **<code>(42.39MB)</code>**。</p><hr><h3 id="结语和留言"><a href="#结语和留言" class="headerlink" title="结语和留言"></a>结语和留言</h3><p>今天是第一天哦，希望自己能坚持下去。</p><hr><p><strong>笔记完毕 编辑完毕时间CST 10.16 23:55</strong></p>]]></content>
    
    
    <summary type="html">今天的力扣签到题为 260. 只出现一次的数字III
给你一个整数数组nums，其中恰好有两个元素只出现一次，其余所有元素均出现两次。找出只出现一次的那两个元素。你可以按任意顺序返回答案</summary>
    
    
    
    <category term="每日一题" scheme="http://smallbat.cn/categories/everyday-quizs/"/>
    
    
    <category term="算法" scheme="http://smallbat.cn/tags/%E7%AE%97%E6%B3%95/"/>
    
    <category term="计算机" scheme="http://smallbat.cn/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
</feed>
